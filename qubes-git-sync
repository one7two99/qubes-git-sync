#!/bin/sh
# qubes-git-sync: Synchronize Git repositories between dom0, SyncVM, and GitHub in Qubes OS
#
# Workflow:
#   - dom0 edits and commits changes
#   - dom0 creates a git bundle and transfers it to SyncVM
#   - SyncVM pulls from the bundle and pushes to GitHub
#
# Assumptions:
#   - dom0 is the primary place for edits
#   - SyncVM has SSH access to GitHub
#   - GitHub is treated as a normal repository (history preserved)

set -euo pipefail

# IMPORTANT - adjust the following variables to reflect your own setup
SYNCVM="my-git-sync"
GITHUB_USER="one7two99"
ALL_REPOS="my-qubes qubes-git-sync"

# Location of the log file
LOGFILE="$HOME/.qubes-git-sync.log"

CMD="${1:-}"
ARG="${2:-}"

usage() {
    cat <<EOF
Usage: $0 {gitpush|gitpull} <repository>|--all

Commands:
  gitpush  Create a git bundle in dom0, import it in $SYNCVM, and push to GitHub
  gitpull  Pull latest commits from GitHub in $SYNCVM and sync back to dom0

Options:
  -h, --help   Show this help
  --all        Run for all repos in ALL_REPOS

Examples:
  $0 gitpush my-qubes
  $0 gitpull --all
EOF
    exit 1
}

log() {
    local level="$1"; shift
    local msg="$*"
    local ts
    ts="$(date '+%Y-%m-%d %H:%M:%S')"
    echo "[$ts] [$level] $msg" | tee -a "$LOGFILE"
}

ensure_repo_in_syncvm() {
    local repo="$1"
    if ! qvm-run "$SYNCVM" "test -d ~/repos/$repo/.git"; then
        log INFO "Cloning '$repo' in $SYNCVM ..."
        if ! qvm-run "$SYNCVM" "mkdir -p ~/repos && cd ~/repos && git clone git@github.com:$GITHUB_USER/$repo.git"; then
            log FAIL "Clone of '$repo' failed. Check SSH/network."
            return 1
        fi
    fi
}

do_action() {
    local action="$1"
    local repo="$2"

    case "$action" in
      gitpush)
        if [ ! -d "$HOME/repos/$repo/.git" ]; then
            log FAIL "Repo $HOME/repos/$repo not found in dom0."
            return 1
        fi

        ensure_repo_in_syncvm "$repo"

        bundle="/tmp/$repo.bundle"
        cd "$HOME/repos/$repo"
        git bundle create "$bundle" HEAD main || { log FAIL "Bundle creation failed for $repo."; return 1; }

        cat "$bundle" | qvm-run --pass-io "$SYNCVM" "cat > /tmp/$repo.bundle"
        rm -f "$bundle"

        # Step 1: fetch from bundle
        if ! qvm-run "$SYNCVM" "cd ~/repos/$repo && git fetch /tmp/$repo.bundle main:refs/remotes/bundle/main"; then
            log FAIL "git fetch failed for $repo in $SYNCVM"
            return 1
        fi

        # Step 2: checkout or create main
        if ! qvm-run "$SYNCVM" "cd ~/repos/$repo && (git checkout main || git checkout -b main origin/main)"; then
            log FAIL "git checkout main failed for $repo in $SYNCVM"
            return 1
        fi

        # Step 3: merge bundle into main
        if ! qvm-run "$SYNCVM" "cd ~/repos/$repo && git merge bundle/main --ff-only"; then
            log FAIL "git merge failed for $repo in $SYNCVM"
            return 1
        fi

        # Step 4: push to GitHub
        if ! qvm-run "$SYNCVM" "cd ~/repos/$repo && git push origin main"; then
            log FAIL "git push failed for $repo in $SYNCVM"
            return 1
        fi

        # Step 5: remove bundle file in SyncVM /tmp
        qvm-run "$SYNCVM" "rm -f /tmp/$repo.bundle" || true

        log OK "Repo '$repo' successfully pushed from dom0 to GitHub."
        ;;

      gitpull)
        ensure_repo_in_syncvm "$repo" || { log FAIL "Setup for '$repo' failed."; return 1; }

        # Step 1: checkout or create main
        if ! qvm-run "$SYNCVM" "cd ~/repos/$repo && (git checkout main || git checkout -b main origin/main)"; then
            log FAIL "git checkout main failed for $repo in $SYNCVM"
            return 1
        fi

        # Step 2: pull from GitHub
        if ! qvm-run "$SYNCVM" "cd ~/repos/$repo && git pull --ff-only"; then
            log FAIL "git pull failed for $repo in $SYNCVM"
            return 1
        fi

        # Step 3: copy repo back to dom0
        mkdir -p "$HOME/repos/$repo"
        if ! qvm-run --pass-io "$SYNCVM" "tar -C ~/repos/$repo -cf - ." | tar -C "$HOME/repos/$repo" -xf -; then
            log FAIL "Transfer of '$repo' from $SYNCVM to dom0 failed"
            return 1
        fi

        log OK "Repo '$repo' successfully updated from GitHub into dom0."
        ;;

      *)
        usage
        ;;
    esac
}

case "$CMD" in
  -h|--help|"")
    usage
    ;;

  gitpush|gitpull)
    if [ "$ARG" = "--all" ]; then
        total=0; ok=0; fail=0
        for r in $ALL_REPOS; do
            total=$((total+1))
            if do_action "$CMD" "$r"; then
                ok=$((ok+1))
            else
                fail=$((fail+1))
            fi
        done
        log INFO "Summary: $ok successful, $fail failed, total $total."
        [ "$fail" -eq 0 ] || exit "$fail"
    elif [ -n "$ARG" ]; then
        do_action "$CMD" "$ARG"
    else
        usage
    fi
    ;;

  *)
    usage
    ;;
esac
