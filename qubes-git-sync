#!/bin/sh
# qubes-git-sync: Synchronization of Git repositories between dom0, a SyncVM, and GitHub in Qubes OS
#
# Usage:
#   qubes-git-sync push <repo>       # Copy repo from dom0 → SyncVM
#   qubes-git-sync pull <repo>       # Copy repo from SyncVM → dom0
#   qubes-git-sync gitpush <repo>    # dom0 → SyncVM, then commit & push to GitHub
#   qubes-git-sync gitpull <repo>    # GitHub → SyncVM → dom0
#   qubes-git-sync push --all        # Run for all repos in ALL_REPOS list
#   qubes-git-sync gitpull --all     # Run for all repos in ALL_REPOS list
#
# Notes:
#   - dom0 never connects to the internet directly
#   - SyncVM must have git and SSH access to GitHub
#   - SSH key must be stored in the SyncVM (never in dom0)

set -euo pipefail

# !!! IMPORTANT !!! - Change this to your own settings
SYNCVM="my-git-sync"                 # Name of the AppVM which will do the sync
GITHUB_USER="your-github-username"   # Change this to your GitHub username
ALL_REPOS="repo1 another-repo"       # Add your default repos which should be synced when using the --all flag

# Default logging location
LOGFILE="$HOME/.qubes-git-sync.log"

CMD="${1:-}"
ARG="${2:-}"

usage() {
    cat <<EOF
Usage: $0 {push|pull|gitpush|gitpull} <repository>|--all

Commands:
  push     Copy repository from dom0 to $SYNCVM
  pull     Copy repository from $SYNCVM to dom0
  gitpush  Sync dom0 → $SYNCVM and push changes to GitHub
  gitpull  Pull latest from GitHub into $SYNCVM and sync to dom0

Options:
  -h, --help   Show this help message
  --all        Run the command for all repositories defined in ALL_REPOS

Examples:
  $0 push my-qubes
  $0 gitpush --all

EOF
    exit 1
}

log() {
    local level="$1"; shift
    local msg="$*"
    local ts
    ts="$(date '+%Y-%m-%d %H:%M:%S')"
    echo "[$ts] [$level] $msg" | tee -a "$LOGFILE"
}

# Ensure repo exists in SyncVM, otherwise clone it
ensure_repo_in_syncvm() {
    local repo="$1"
    if ! qvm-run "$SYNCVM" "test -d ~/repos/$repo/.git"; then
        log INFO "Repo '$repo' not found in $SYNCVM, attempting git clone ..."
        if ! qvm-run "$SYNCVM" "mkdir -p ~/repos && cd ~/repos && git clone git@github.com:$GITHUB_USER/$repo.git"; then
            log FAIL "git clone for '$repo' failed. Please check network/SSH key."
            return 1
        fi
        log OK "Repo '$repo' successfully cloned in $SYNCVM."
    fi
}

# Execute an action for a single repository
do_action() {
    local action="$1"
    local repo="$2"

    case "$action" in
      push)
        if [ ! -d "$HOME/repos/$repo" ]; then
            log FAIL "Repository $HOME/repos/$repo does not exist in dom0."
            return 1
        fi
        if tar -C "$HOME/repos/$repo" -cf - . \
            | qvm-run --pass-io "$SYNCVM" "mkdir -p ~/repos/$repo && tar -C ~/repos/$repo -xf -"; then
            log OK "Repo '$repo' successfully copied from dom0 to $SYNCVM."
        else
            log FAIL "Transfer of '$repo' to $SYNCVM failed."
            return 1
        fi
        ;;

      pull)
        mkdir -p "$HOME/repos/$repo"
        if qvm-run --pass-io "$SYNCVM" "tar -C ~/repos/$repo -cf - ." \
            | tar -C "$HOME/repos/$repo" -xf -; then
            log OK "Repo '$repo' successfully copied from $SYNCVM to dom0."
        else
            log FAIL "Transfer of '$repo' from $SYNCVM to dom0 failed."
            return 1
        fi
        ;;

      gitpush)
        ensure_repo_in_syncvm "$repo" || { log FAIL "Setup for '$repo' failed."; return 1; }
        "$0" push "$repo" || { log FAIL "Push of '$repo' from dom0 to $SYNCVM failed."; return 1; }
        if qvm-run "$SYNCVM" "cd ~/repos/$repo && git add . && git commit -m 'Sync from dom0' || true && git push"; then
            log OK "Repo '$repo' successfully pushed from dom0 to GitHub."
        else
            log FAIL "Git push for '$repo' failed. Please check logs in $SYNCVM."
            return 1
        fi
        ;;

      gitpull)
        ensure_repo_in_syncvm "$repo" || { log FAIL "Setup for '$repo' failed."; return 1; }
        if ! qvm-run "$SYNCVM" "cd ~/repos/$repo && git pull --ff-only"; then
            log FAIL "Git pull for '$repo' failed (non-fast-forward or network issue)."
            return 1
        fi
        "$0" pull "$repo" || { log FAIL "Pull of '$repo' from $SYNCVM to dom0 failed."; return 1; }
        log OK "Repo '$repo' successfully pulled from GitHub into dom0."
        ;;

      *)
        usage
        ;;
    esac
}

# --- Main routine ---
case "$CMD" in
  -h|--help|"")
    usage
    ;;

  push|pull|gitpush|gitpull)
    if [ "$ARG" = "--all" ]; then
        total=0; ok=0; fail=0
        for r in $ALL_REPOS; do
            total=$((total+1))
            if do_action "$CMD" "$r"; then
                ok=$((ok+1))
            else
                fail=$((fail+1))
            fi
        done
        log INFO "Summary: $ok successful, $fail failed, total $total."
        [ "$fail" -eq 0 ] || exit "$fail"
    elif [ -n "$ARG" ]; then
        do_action "$CMD" "$ARG"
    else
        usage
    fi
    ;;

  *)
    usage
    ;;
esac
